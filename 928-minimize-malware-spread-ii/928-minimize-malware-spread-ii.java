class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n=graph.length;
        
        Arrays.sort(initial);
        int score=Integer.MAX_VALUE;
        int res=-1;
        
        for(int k=0;k<initial.length;k++){
            int node=initial[k];
            List<List<Integer>> g=new ArrayList<>();
            for(int j=0;j<n;j++) g.add(new ArrayList<Integer>());
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(i==node||j==node) continue;
                    if(graph[i][j]==1) addEdge(g,i,j);
                }
            }
            
            //running multisource bfs to find out the number of infected node
            int currScore=bfs(g,initial,k,n);
            // System.out.println(currScore);
            if(currScore<score){
                score=currScore;
                res=node;
            }
        }
        
        return res;
    }
    
    public void addEdge(List<List<Integer>> g,int u,int v){
        g.get(u).add(v);
    }
    
    public int bfs(List<List<Integer>> g,int initial[],int k,int n){
        Queue<Integer> queue=new ArrayDeque<>();
        int infected=initial.length-1;
        boolean vis[]=new boolean[n];
        for(int i=0;i<initial.length;i++){
            if(i==k) continue;
            queue.add(initial[i]);
            vis[initial[i]]=true;
        }

        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int curr=queue.poll();
                for(int next:g.get(curr)){
                    if(!vis[next]){
                        infected++;
                        vis[next]=true;
                        queue.add(next);
                    }
                }
            }
        }
        
        return infected;
    }
}
